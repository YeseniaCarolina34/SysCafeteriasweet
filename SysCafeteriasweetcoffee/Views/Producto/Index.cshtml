@model IEnumerable<Producto>
@{
    ViewData["Title"] = "Productos";
}

<h1>Productos</h1>


<form style="display: flex; justify-content: center; align-items: center; margin: 20px 0; background-color: #fff0f5; padding: 10px; border-radius: 30px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">
    <select name="idCategoria" style="padding: 10px 15px; border: 1px solid #ffc0cb; border-radius: 30px 0 0 30px; background-color: #fff; color: #a52a2a; font-size: 14px; flex: 1; outline: none;">
        <option value="">Seleccionar Categoría</option>
        @foreach (var categoria in ViewData["Categorias"] as SelectList)
        {
            var selected = categoria.Value == ViewData["idCategoria"]?.ToString() ? "selected" : "";
            <option value="@categoria.Value" selected="@selected">@categoria.Text</option>
        }
    </select>
    <button type="submit" style="background-color: #ff69b4; color: white; padding: 10px 20px; border: none; border-radius: 0 30px 30px 0; font-size: 16px; font-weight: bold; cursor: pointer; box-shadow: none;">
        🔍
    </button>
</form>
 

<div class="row" id="product-container">
    @foreach (var item in Model)

    {
        <div class="col-md-3 mb-3">
            <div class="dessert-item card">
                <img src="@item.img" class="card-img-top" alt="Imagen del producto" style="height: 200px; object-fit: cover;">
                <div class="card-body">
                    <h5 class="card-title">@item.Nombre</h5>
                    <p class="card-text">
                        <small class="text-muted">Precio: @item.Precio</small><br>
                        <small class="text-muted">Descripción: @item.Descripcion</small><br>
                    </p>
                    <div class="button-container">
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-secondary">Ver</a>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-outline-info">Editar</a>
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-outline-danger">Eliminar</a>
                    </div>

                    <button class="btn btn-pink mt-2 order-btn"
                            data-id="@item.Id"
                            data-nombre="@item.Nombre"
                            data-precio="@item.Precio">
                        Agregar a la Orden
                    </button>
                </div>
            </div>
        </div>
    }
</div>


<!-- Barra lateral de la orden -->
<div class="sidebar" id="sidebar">
    <h2>Mi Orden</h2>
    <ul id="order-list"></ul>
    <p><strong>Total:</strong> $<span id="total">0.00</span></p>
    <button id="finalize-order" class="btn btn-success">Finalizar Orden</button>
</div> 


<script>
    let order = [];

    document.querySelectorAll('.order-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            const id = btn.dataset.id;
            const nombre = btn.dataset.nombre;
            const precio = parseFloat(btn.dataset.precio);

            const existingItem = order.find(item => item.id === id);
            if (existingItem) {
                existingItem.quantity++;
            } else {
                order.push({ id, nombre, precio, quantity: 1 });
            }

            renderOrder();
            openSidebar();
        });
    });
    function openSidebar() {
        const sidebar = document.getElementById("sidebar");
        if (!sidebar.classList.contains("active")) {
            sidebar.classList.add("active"); // Asegúrate de que se abra solo si está cerrado
            const productContainer = document.getElementById("product-container");
            productContainer.classList.add("content-shift");
        }
    }
    function renderOrder() {
        const orderList = document.getElementById('order-list');
        const totalSpan = document.getElementById('total');
        orderList.innerHTML = '';
        let total = 0;

        order.forEach(item => {
            total += item.precio * item.quantity;
            const li = document.createElement('li'); 
            li.classList.add("order-item");

            li.innerHTML = `
                                ${item.nombre} - $${item.precio.toFixed(2)}
                                <input type="number" value="${item.quantity}" min="1" onchange="updateQuantity('${item.id}', this.value)">
                                <button onclick="removeFromOrder('${item.id}')">Eliminar</button>
                            `;
            orderList.appendChild(li);
        });

        totalSpan.textContent = total.toFixed(2);
    }

    function removeFromOrder(id) {
        order = order.filter(item => item.id !== id);
        renderOrder();
    }


    document.getElementById('finalize-order').addEventListener('click', () => {
        const total = parseFloat(document.getElementById('total').textContent);

        fetch('/Orden/AgregarOrden', {
            method: 'POST',
            headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
            body: JSON.stringify({
                total,
                DetallesDeOrden: order.map(item => ({
                    IdProducto: item.id,
                    Cantidad: item.quantity,
                    Precio: item.precio
                }))
            })
        }).then(response => {
            if (response.ok) {
                // Mostrar el mensaje de éxito usando SweetAlert
                Swal.fire('¡Éxito!', '¡Tu orden ha sido creada exitosamente y está en proceso!', 'success')
                    .then(() => {
                        // Limpiar la orden y la interfaz después de mostrar el mensaje
                        order = [];
                        renderOrder();
                        toggleSidebar();
                    });
            } else {
                // Si la respuesta no es exitosa, mostrar un mensaje de error
                Swal.fire('Error', 'Hubo un problema al procesar tu orden. Intenta nuevamente.', 'error');
            }
        }).catch(error => {
            // Manejo de errores en caso de que la solicitud falle
            Swal.fire('Error', 'Hubo un problema al enviar la solicitud. Intenta nuevamente.', 'error');
        });
    });
    function toggleSidebar() {
        const sidebar = document.getElementById("sidebar");
        const productContainer = document.getElementById("product-container");
        sidebar.classList.toggle("active");
        productContainer.classList.toggle("content-shift");
    }

</script>
<style>


    /* Estilo para centrar los botones */
    .button-container {
        display: flex;
        justify-content: center; /* Centrar horizontalmente */
        gap: 10px; /* Espaciado entre los botones */
        flex-wrap: wrap; /* Permite que los botones se ajusten si el espacio es limitado */
        padding-top: 10px;
    }

    /* Estilo de las cards */
    .dessert-item {
        border: none;
        border-radius: 10px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .dessert-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

    #toggle-sidebar {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 1000;
        background-color: #007bff;
        color: #fff;
        padding: 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .sidebar {
        width: 280px;
        padding: 20px;
        background-color: #f8f9fa;
        position: fixed;
        right: -280px; /* Asegurarse de que la barra lateral esté completamente oculta */
        top: 0;
        height: 100%;
        box-shadow: -3px 0px 10px rgba(0, 0, 0, 0.1);
        transition: right 0.3s ease-in-out; /* Suaviza la animación */
    }

        .sidebar.active {
            right: 0;
        }

        .sidebar h2 {
            margin-top: 0;
        }

        .sidebar button {
            background-color: #ff69b4;
            color: #fff;
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .sidebar button:hover {
                background-color: #ff1493;
            }

    #order-list {
        list-style-type: none;
        padding: 0;
    }

    .order-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .order-item input[type="number"] {
            width: 40px;
        }

    /* Color rosado para botones */
    .btn-pink {
        background-color: #ff69b4;
        color: #fff;
    }

        .btn-pink:hover {
            background-color: #ff1493;
        }

    /* Botón "Eliminar" como "X" */
    .remove-btn {
        background: none;
        border: none;
        font-size: 16px;
        color: #dc3545;
        cursor: pointer;
    }

    /* Ajuste del contenedor de productos cuando la barra lateral está activa */
    .content-shift {
        /* margin-right: 280px;  Asegúrate de que el contenedor también se ajuste cuando la barra lateral esté abierta */
        margin-right: 100px;
        transition: margin-right 0.3s ease-in-out;
        flex-wrap: wrap;
        display: flex;
        justify-content: left; /* Alinea las cards al centro */
        gap: 20px; /* Espacio entre las cards */
        padding: 20px;
    }

    /* Botón de abrir barra lateral */
    .open-btn {
        position: fixed;
        right: 20px;
        bottom: 20px;
        padding: 10px 15px;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    /* Desplazamiento dinámico de cards */
    .content {
        transition: margin-right 0.3s ease;
    }

    /* Clase para ajustar el margen cuando la barra lateral está abierta */
    .sidebar-open .content {
        margin-right: 280px; /* Ajuste del margen para la vista cuando la barra lateral está activa */
    }
</style>
